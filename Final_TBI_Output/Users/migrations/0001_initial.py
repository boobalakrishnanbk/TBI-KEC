# Generated by Django 3.2.7 on 2022-05-16 18:44

import Users.files
import Users.functions
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('entityName', models.CharField(max_length=50, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Only Alphabets, space( ), comma(,), dot(.) are allowed', regex='^[a-zA-Z .,&()]*$')], verbose_name='Entity Name')),
            ],
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Only Alphabets, space( ), comma(,), dot(.) are allowed', regex='^[a-zA-Z .,&()]*$')], verbose_name='Event Name')),
                ('hours', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Hours')),
                ('fromdate', models.DateField(verbose_name='Event Start Date')),
                ('todate', models.DateField(blank=True, null=True, verbose_name='Event End Date')),
                ('days', models.IntegerField(blank=True, null=True, validators=[Users.functions.MinValueValidators], verbose_name='No. of Days')),
                ('inKECstudents', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Students (KEC)')),
                ('outstudents', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Students (Other)')),
                ('inKECstaffs', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Staffs (KEC)')),
                ('outstaffs', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Staffs (Other)')),
                ('inKECOrganizaions', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Organizaions (KEC)')),
                ('outOrganizaions', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of Organizaions (Other)')),
            ],
            options={
                'unique_together': {('title', 'fromdate', 'todate')},
            },
        ),
        migrations.CreateModel(
            name='FinancialYear',
            fields=[
                ('financialYear', models.CharField(max_length=12, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Financial Year must be in the format YYYY-YYYY', regex='^[0-9-]*$')], verbose_name='Financial Year')),
            ],
        ),
        migrations.CreateModel(
            name='FundingType',
            fields=[
                ('fundType', models.CharField(max_length=60, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Fund Type')),
            ],
        ),
        migrations.CreateModel(
            name='Incubatee',
            fields=[
                ('incubatee_ID', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='Incubatee ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Incubatee Name')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=8, verbose_name='Gender')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('community', models.CharField(choices=[('General', 'General'), ('OBC', 'OBC'), ('SC', 'SC'), ('ST', 'ST'), ('Others', 'Others')], max_length=8, verbose_name='Community')),
                ('mail', models.EmailField(max_length=60, verbose_name='Email ID')),
                ('mobile', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^\\+?1?\\d{10,10}$')], verbose_name='Mobile Number')),
                ('state', models.CharField(max_length=30, verbose_name='State')),
                ('city', models.CharField(max_length=30, verbose_name='City')),
                ('aadhaar', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^\\+?1?\\d{12,12}$')], verbose_name='Aadhaar Card Number')),
                ('pan', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Only Alphabets and Numbers are allowed', regex='^[a-zA-Z0-9]*$')], verbose_name='PAN Card Number')),
                ('education', models.CharField(choices=[('SSC', 'SSC'), ('HSC', 'HSC'), ('UG', 'UG'), ('PG', 'PG'), ('Doctorate', 'Doctorate')], max_length=10, verbose_name='Educational Qualification')),
                ('degree', models.CharField(blank=True, default='', help_text='B.Tech., Civil', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Only Alphabets, space( ), comma(,), dot(.) are allowed', regex='^[a-zA-Z .,&()]*$')], verbose_name='Degree')),
                ('university', models.CharField(blank=True, default='', max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='University (or) School (or) College')),
                ('profile', models.ImageField(blank=True, default='Front End/Images/user.png', null=True, upload_to=Users.files.incubatee_Photos, verbose_name='Profile Picture')),
                ('alumini', models.CharField(blank=True, choices=[('KEC', 'KEC'), ('KPIT', 'KPIT'), ('ITI', 'ITI'), ('Kongu Arts & Science', 'Kongu Arts & Science')], max_length=20, null=True, verbose_name='Alumini of ')),
                ('year', models.IntegerField(blank=True, help_text='Passout Year E.g.. 2022', null=True, verbose_name='Passout Year')),
                ('updateOn', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('financialYear', models.ForeignKey(blank=True, help_text='Year entered into TBI..', null=True, on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear', verbose_name='Financial Year')),
            ],
        ),
        migrations.CreateModel(
            name='ProgramType',
            fields=[
                ('programName', models.CharField(max_length=60, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Program Type')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Project Title')),
                ('domain', models.CharField(help_text="e.g. 'Computer Science', 'EEE', etc.", max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Project Domain')),
                ('description', models.TextField(verbose_name='Project Description')),
                ('term', models.IntegerField(help_text='e.g. 3, 6, 12', validators=[Users.functions.MinValueValidators], verbose_name='Project Term (in months)')),
                ('amount', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$')], verbose_name='Project Sanctioned Amount (in Rs.)')),
                ('amountSanctionedDate', models.DateField(blank=True, null=True, verbose_name='Amount Sanctioned Date')),
                ('startDate', models.DateField(blank=True, null=True, verbose_name='Project Start Date')),
                ('endDate', models.DateField(blank=True, null=True, verbose_name='Project End Date')),
                ('status', models.CharField(choices=[('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Discontinued', 'Discontinued')], default='In Progress', max_length=12, verbose_name='Project Status')),
                ('projectStatus', models.CharField(choices=[('Proof of Concept', 'Proof of Concept'), ('Prototype', 'Prototype'), ('Minimum Viable Product', 'Minimum Viable Product'), ('Product', 'Product'), ('Commercialised', 'Commercialised')], default='Proof of Concept', max_length=22, verbose_name='Product Status')),
                ('completionDate', models.DateField(blank=True, null=True, verbose_name='Project Completion Date')),
                ('outcome', models.TextField(blank=True, null=True, verbose_name='Project Outcome')),
                ('closureReport', models.FileField(blank=True, null=True, upload_to=Users.files.closureReport_Certificate, verbose_name='Project Closure Report')),
                ('certifiedUC_SE', models.FileField(blank=True, null=True, upload_to=Users.files.UCReport_Certificate, verbose_name='Project Certified UC Report')),
                ('dropoutDate', models.DateField(blank=True, null=True, verbose_name='Dropout Date')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('financialYear', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear', verbose_name='Select Financial Year')),
                ('fund_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.fundingtype', verbose_name='Select Fund Type')),
                ('incubatee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.incubatee', verbose_name='Select Incubatee')),
            ],
        ),
        migrations.CreateModel(
            name='Schemes',
            fields=[
                ('schemeName', models.CharField(max_length=60, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Scheme Name')),
                ('status', models.BooleanField(default=True)),
                ('amount', models.CharField(default='0', max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$')], verbose_name='Amount')),
            ],
        ),
        migrations.CreateModel(
            name='Visitors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date of visit')),
                ('guestName', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Guest Name')),
                ('name', models.CharField(help_text='For Individual, specify Iindividual. Or Others specify that.', max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Name of Organisation/ Institute')),
                ('count', models.IntegerField(verbose_name='No. of Visitors')),
                ('purpose', models.CharField(max_length=100, verbose_name='Purpose')),
                ('type', models.CharField(choices=[('Individual', 'Individual'), ('Institution', 'Institution'), ('Organization', 'Organization')], max_length=50, verbose_name='Visitor Type')),
            ],
            options={
                'unique_together': {('date', 'guestName', 'name')},
            },
        ),
        migrations.CreateModel(
            name='VisitorImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=Users.files.visitorPhotos)),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.visitors')),
            ],
        ),
        migrations.CreateModel(
            name='Trademark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=Users.files.Trademark_Photo, verbose_name='Logo / Name of the Company')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('filedOn', models.DateField(verbose_name='Trademark Filing Date')),
                ('trademarkNo', models.CharField(default='', max_length=10, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9]*$')], verbose_name='Trademark Number')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRevenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revenue', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Revenue Amount')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('financialYear', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear', verbose_name='Financial Year')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_image', models.ImageField(default='static/images/user1.png', upload_to=Users.files.Product_Photo, verbose_name='Product Picture')),
                ('product_name', models.CharField(max_length=50, verbose_name='Product Name')),
                ('units_sold', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='No. of units sold')),
                ('launchDate', models.DateField(verbose_name='Launch Date')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('financialYear', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear', verbose_name='Financial Year')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectIntern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rollno', models.CharField(max_length=20, verbose_name='Roll No.')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('Department', models.CharField(max_length=50, verbose_name='Department')),
                ('title', models.CharField(max_length=50, verbose_name='Intern Title')),
                ('fromdate', models.DateField(verbose_name='Intern Start Date')),
                ('todate', models.DateField(verbose_name='Intern End Date')),
                ('stipend', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, verbose_name='Stipend')),
                ('amount', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$')], verbose_name='Amount')),
                ('certificate', models.FileField(blank=True, null=True, upload_to=Users.files.Intern_Certifcate, verbose_name='Certificate')),
                ('financialYear', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear', verbose_name='Financial Year')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectEmployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment', models.IntegerField(validators=[Users.functions.MinValueValidators], verbose_name='Employment Generated')),
                ('date', models.DateField()),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectAwards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Event Date')),
                ('eventName', models.CharField(max_length=100, verbose_name='Event Name')),
                ('awardTitle', models.CharField(max_length=100, verbose_name='Award Title')),
                ('amount', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$')], verbose_name='Price Money')),
                ('certificate', models.FileField(blank=True, null=True, upload_to=Users.files.Awards_Certifcate, verbose_name='Certificate')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=Users.files.Awards_Photo, verbose_name='Award Photo')),
                ('financialYear', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear', verbose_name='Financial Year')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='scheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.schemes', verbose_name='Select Scheme'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pc_ID', models.CharField(max_length=30)),
                ('pan', models.CharField(max_length=20)),
                ('approval_on', models.CharField(max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Patent Title')),
                ('filedOn', models.DateField(verbose_name='Patent Filing Date')),
                ('patentNo', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9]*$')], verbose_name='Patent Number')),
                ('publishedAt', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Publication Country')),
                ('type', models.CharField(choices=[('Product', 'Product'), ('Process', 'Process'), ('Design', 'Design'), ('Utility', 'Utility'), ('Other', 'Other')], max_length=12, verbose_name='Patent Type')),
                ('status', models.CharField(choices=[('Provisional Patent Filed', 'Provisional Patent Filed'), ('Complete Specification Indian Patent Filed', 'Complete Specification Indian Patent Filed'), ('Patent Granted', 'Patent Granted'), ('PCT Filed', 'PCT Filed'), ('PCT Granted', 'PCT Granted')], max_length=42, verbose_name='Status')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='Installment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installmentDate', models.DateField(verbose_name='Installment Date')),
                ('disbursedOn', models.DateField(blank=True, null=True, verbose_name='Disbursed On')),
                ('disbursedAmt', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$')], verbose_name='Disbursed Amount (in Rs.)')),
                ('uc_attachment', models.FileField(blank=True, null=True, upload_to=Users.files.Installment_UC_Certificate)),
                ('progressReport', models.FileField(blank=True, null=True, upload_to=Users.files.Installment_Progress_Certificate)),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='FundUtilization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fromDate', models.DateField(verbose_name='From Date')),
                ('toDate', models.DateField(verbose_name='To Date')),
                ('openingBalance', models.CharField(default='0', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Opening Balance')),
                ('prototypeGrant', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Prototype Grant')),
                ('operationExpenditure', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Operational Expenditure')),
                ('fabLab', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='FAB Lab')),
                ('interestAmt', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Interest Amount')),
                ('returnedAmt', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Returned Amount')),
                ('closingBalance', models.CharField(default='0', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Closing Balance')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('financialYear', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.financialyear', verbose_name='Financial Year')),
                ('scheme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.schemes', verbose_name='Scheme')),
            ],
        ),
        migrations.CreateModel(
            name='FundLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sanctionedAmt', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$')], verbose_name='Sanctioned Amount')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Sanctioned Date')),
                ('financialYear', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.financialyear')),
                ('schemeName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.schemes')),
            ],
        ),
        migrations.CreateModel(
            name='FundDisbursement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disbursedOn', models.DateField(verbose_name='Disbursed On')),
                ('openingBalance', models.CharField(default='0', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Opening Balance')),
                ('prototypeGrant', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Prototype Grant')),
                ('operationExpenditure', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Operational Expenditure')),
                ('fabLab', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='FAB Lab')),
                ('closingBalance', models.CharField(default='0', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9,]*$'), Users.functions.MinValueValidators], verbose_name='Closing Balance')),
                ('comment', models.TextField()),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('financialYear', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.financialyear', verbose_name='Financial Year')),
                ('scheme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.schemes', verbose_name='Scheme')),
            ],
        ),
        migrations.CreateModel(
            name='EventSponsors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Sponsor Name')),
                ('amount', models.CharField(max_length=20, verbose_name='Amount')),
                ('eventSponser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.events')),
            ],
        ),
        migrations.CreateModel(
            name='EventReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=Users.files.eventReports)),
                ('events', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.events')),
            ],
        ),
        migrations.CreateModel(
            name='EventImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=Users.files.eventPhotos)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.events')),
            ],
        ),
        migrations.CreateModel(
            name='Copyright',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Copyright Title')),
                ('filedOn', models.DateField(verbose_name='Copyright Filing Date')),
                ('copyrightNo', models.CharField(default='', max_length=10, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^[0-9]*$')], verbose_name='Copyright Number')),
                ('publishedAt', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Publication Country')),
                ('type', models.CharField(choices=[('Software', 'Software'), ('Architecture', 'Architecture')], max_length=12, verbose_name='Copyright Type')),
                ('status', models.CharField(choices=[('Filed', 'Filed'), ('Not Granted', 'Not Granted'), ('Granted', 'Granted')], max_length=45, verbose_name='Status')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.project')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Company Name')),
                ('company_status', models.CharField(choices=[('Registered', 'Registered'), ('Unregistered', 'Unregistered')], default='Unregistered', max_length=20)),
                ('startupFormed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Startup Formed?')),
                ('startupFormedDate', models.DateField(blank=True, null=True, verbose_name='Startup Formed Date')),
                ('address_state', models.CharField(blank=True, max_length=30, null=True, verbose_name='State')),
                ('address_city', models.CharField(blank=True, max_length=30, null=True, verbose_name='City')),
                ('company_pan', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Only Alphabets and Numbers are allowed', regex='^[a-zA-Z0-9]*$')], verbose_name='PAN Card Number')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Company Website')),
                ('cin', models.CharField(blank=True, max_length=20, null=True, verbose_name='Company Identification Number (CIN)')),
                ('din', models.CharField(blank=True, max_length=20, null=True, verbose_name='Director Identification Number (DIN)')),
                ('incorporationDate', models.DateField(blank=True, null=True, verbose_name='Incorporation Date')),
                ('incorporationCertificate', models.FileField(blank=True, null=True, upload_to=Users.files.incorporation_Certificate, verbose_name='Incorporation Certificate')),
                ('enrollmentDate', models.DateField(blank=True, default=datetime.date.today, null=True, verbose_name='Enrollment Date')),
                ('enrollmentagreementDate', models.DateField(blank=True, default=datetime.date.today, null=True, verbose_name='Enrollment Agreement Date')),
                ('renewalDate', models.DateField(blank=True, null=True, verbose_name='Next Renewal Date')),
                ('graduationDate', models.DateField(blank=True, null=True, verbose_name='Graduation Date')),
                ('graduationType', models.CharField(blank=True, choices=[('Live', 'Live'), ('Closed', 'Closed')], default='Live', max_length=10, null=True, verbose_name='Type of Granduation')),
                ('survivalDuringIncubation', models.IntegerField(blank=True, null=True, verbose_name='Survival During Incubation Period(in days)')),
                ('survivalAfterIncubation', models.IntegerField(blank=True, null=True, verbose_name='Survival After Incubation Period(in days)')),
                ('entityCertificate', models.FileField(blank=True, null=True, upload_to=Users.files.entity_Certificate, verbose_name='Entity Certificate')),
                ('logo', models.ImageField(blank=True, default='Front End/Images/company-logo.png', null=True, upload_to=Users.files.company_Logo_Photos, verbose_name='Company Logo')),
                ('updateOn', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('entityDetails', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Users.entity', verbose_name='Entity Type')),
                ('incubatee_ID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Users.incubatee', verbose_name='Incubatee')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('incubatee', 'scheme')},
        ),
        migrations.CreateModel(
            name='IncubateeTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Name')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=8, verbose_name='Gender')),
                ('mail', models.EmailField(error_messages={'ValueError': 'Enter a valid mail id'}, max_length=60, verbose_name='Email ID')),
                ('mobile', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^\\+?1?\\d{10,10}$')], verbose_name='Mobile Number')),
                ('state', models.CharField(default='', max_length=30, verbose_name='State')),
                ('city', models.CharField(default='', max_length=30, verbose_name='City')),
                ('community', models.CharField(choices=[('General', 'General'), ('OBC', 'OBC'), ('SC', 'SC'), ('ST', 'ST'), ('Others', 'Others')], max_length=8, null=True, verbose_name='Community ')),
                ('education', models.CharField(choices=[('SSC', 'SSC'), ('HSC', 'HSC'), ('UG', 'UG'), ('PG', 'PG'), ('Doctorate', 'Doctorate')], max_length=40, null=True, verbose_name='Educational Qualification')),
                ('university', models.CharField(default='', max_length=40, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='University / College / School')),
                ('role', models.CharField(max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Only alphabetical characters are allowed', regex='^[a-zA-Z ]*$')], verbose_name='Role')),
                ('pan', models.CharField(blank=True, max_length=15, null=True, verbose_name='PAN Card Number')),
                ('aadhaar', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Only numbers are allowed', regex='^\\+?1?\\d{12,12}$')], verbose_name='Aadhaar Card Number')),
                ('alumini', models.CharField(blank=True, choices=[('KEC', 'KEC'), ('KPIT', 'KPIT'), ('ITI', 'ITI'), ('Kongu Arts & Science', 'Kongu Arts & Science')], max_length=20, null=True)),
                ('year', models.IntegerField(blank=True, help_text='Passout Year E.g.. 2022', null=True, validators=[Users.functions.MinValueValidators], verbose_name='Passout Year')),
                ('profile', models.ImageField(blank=True, default='Front End/Images/user.png', null=True, upload_to=Users.files.TeamProfilePics, verbose_name='Profile Picture')),
                ('updateOn', models.DateField(default=datetime.date.today)),
                ('incubatee_ID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Users.incubatee')),
            ],
            options={
                'unique_together': {('incubatee_ID', 'aadhaar', 'pan')},
            },
        ),
    ]
